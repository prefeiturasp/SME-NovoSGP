pipeline {  
    agent {
      kubernetes { 
         label 'dotnet5-sonar'
      }
    }

    options {
      buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
      disableConcurrentBuilds()
    }
  
    stages {      
        stage('Sonar & Testes') {
        parallel {
          stage('TesteIntegracao & build'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                  withSonarQubeEnv('sonarqube-local'){
                    sh 'dotnet-sonarscanner begin /k:"SME-NovoSGP" /d:sonar.cs.opencover.reportsPaths="teste/SME.SGP.TesteIntegracao/coverage.opencover.xml" /d:sonar.coverage.exclusions="**Test*.cs, **/*SME.SGP.Dados.*, **/*SME.SGP.Dominio.Interfaces, **/*SME.SGP.Api, **/*SME.SGP.Infra, **/*SME.SGP.IoC, **/*SME.SGP.Infra.*, **/*/Workers/*, **/*/Hub/*"'
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
                    sh 'dotnet-sonarscanner end'
                  }
               }
            }
          }

          stage('TesteIntegracao.AEE'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                  withSonarQubeEnv('sonarqube-local'){
                    sh 'dotnet-sonarscanner begin /k:"SME-NovoSGP" /d:sonar.cs.opencover.reportsPaths="teste/SME.SGP.TesteIntegracao.AEE/coverage.opencover.xml" /d:sonar.coverage.exclusions="**Test*.cs, **/*SME.SGP.Dados.*, **/*SME.SGP.Dominio.Interfaces, **/*SME.SGP.Api, **/*SME.SGP.Infra, **/*SME.SGP.IoC, **/*SME.SGP.Infra.*, **/*/Workers/*, **/*/Hub/*"'
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao.AEE /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
                    sh 'dotnet-sonarscanner end'
                  }
               }
            }
          }

          stage('TesteIntegracao.Aula'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                  withSonarQubeEnv('sonarqube-local'){
                    sh 'dotnet-sonarscanner begin /k:"SME-NovoSGP" /d:sonar.cs.opencover.reportsPaths="teste/SME.SGP.TesteIntegracao.Aula/coverage.opencover.xml" /d:sonar.coverage.exclusions="**Test*.cs, **/*SME.SGP.Dados.*, **/*SME.SGP.Dominio.Interfaces, **/*SME.SGP.Api, **/*SME.SGP.Infra, **/*SME.SGP.IoC, **/*SME.SGP.Infra.*, **/*/Workers/*, **/*/Hub/*"'
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao.Aula /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
                    sh 'dotnet-sonarscanner end'
                  }
               }
            }
          }

          stage('TesteIntegracao.Fechamento'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                  withSonarQubeEnv('sonarqube-local'){
                    sh 'dotnet-sonarscanner begin /k:"SME-NovoSGP" /d:sonar.cs.opencover.reportsPaths="teste/SME.SGP.TesteIntegracao.Fechamento/coverage.opencover.xml" /d:sonar.coverage.exclusions="**Test*.cs, **/*SME.SGP.Dados.*, **/*SME.SGP.Dominio.Interfaces, **/*SME.SGP.Api, **/*SME.SGP.Infra, **/*SME.SGP.IoC, **/*SME.SGP.Infra.*, **/*/Workers/*, **/*/Hub/*"'
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao.Fechamento /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
                    sh 'dotnet-sonarscanner end'
                  }
               }
            }
          }

          stage('TesteIntegracao.Frequencia'){
            agent { kubernetes {
               label 'dotnet5-sonar'
               defaultContainer 'dotnet5-sonar'
              }
            }
            steps{
              script{
                  withSonarQubeEnv('sonarqube-local'){
                    sh 'dotnet-sonarscanner begin /k:"SME-NovoSGP" /d:sonar.cs.opencover.reportsPaths="teste/SME.SGP.TesteIntegracao.Frequencia/coverage.opencover.xml" /d:sonar.coverage.exclusions="**Test*.cs, **/*SME.SGP.Dados.*, **/*SME.SGP.Dominio.Interfaces, **/*SME.SGP.Api, **/*SME.SGP.Infra, **/*SME.SGP.IoC, **/*SME.SGP.Infra.*, **/*/Workers/*, **/*/Hub/*"'
                    sh 'dotnet test teste/SME.SGP.TesteIntegracao.Frequencia /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
                    sh 'dotnet-sonarscanner end'
                  }
               }
            }
          }
        }
      }       
    }
  }
