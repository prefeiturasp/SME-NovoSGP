diff a/src/SME.SGP.Aplicacao/Comandos/ComandosUsuario.cs b/src/SME.SGP.Aplicacao/Comandos/ComandosUsuario.cs	(rejected hunks)
@@ -1,12 +1,12 @@
-﻿using MediatR;
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+using MediatR;
 using SME.SGP.Aplicacao.Integracoes;
 using SME.SGP.Dominio;
 using SME.SGP.Dominio.Interfaces;
 using SME.SGP.Infra;
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Threading.Tasks;
 
 namespace SME.SGP.Aplicacao
 {
@@ -91,26 +91,28 @@ namespace SME.SGP.Aplicacao
         {
             login = login.Trim().ToLower();
             var retornoAutenticacaoEol = await servicoAutenticacao.AutenticarNoEol(login, senha);
-
             return await ObterAutenticacao(retornoAutenticacaoEol, login);
         }
-
-        public async Task<UsuarioAutenticacaoRetornoDto> ObterAutenticacao((UsuarioAutenticacaoRetornoDto, string, IEnumerable<Guid>, bool, bool)
+        
+        
+        //sugestao de nomear tuplas se for manter ou trocar para records ou tipos de estrutura mais flexiveis
+        //que encapsulem o retorno. Nomeando a tuple fica bem mais legivel a logica executada
+        public async Task<UsuarioAutenticacaoRetornoDto> ObterAutenticacao((UsuarioAutenticacaoRetornoDto UsuarioAutenticacaoRetornoDto, string CodigoRf, IEnumerable<Guid> Perfis, bool PossuiCargoCJ, bool PossuiPerfilCJ)
             retornoAutenticacaoEol, string login, AdministradorSuporteDto administradorSuporte = null)
         {
-            if (!retornoAutenticacaoEol.Item1.Autenticado)
-                return retornoAutenticacaoEol.Item1;
+            if (!retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto.Autenticado)
+                return retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto;
 
             var dadosUsuario = await servicoEOL.ObterMeusDados(login);
 
-            var usuario = await servicoUsuario.ObterUsuarioPorCodigoRfLoginOuAdiciona(retornoAutenticacaoEol.Item2, login, dadosUsuario.Nome, dadosUsuario.Email, true);
+            var usuario = await servicoUsuario.ObterUsuarioPorCodigoRfLoginOuAdiciona(retornoAutenticacaoEol.CodigoRf, login, dadosUsuario.Nome, dadosUsuario.Email, true);
 
-            retornoAutenticacaoEol.Item1.PerfisUsuario = await servicoPerfil.DefinirPerfilPrioritario(retornoAutenticacaoEol.Item3, usuario);
+            retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto.PerfisUsuario = await servicoPerfil.DefinirPerfilPrioritario(retornoAutenticacaoEol.Perfis, usuario);
 
-            var perfis = retornoAutenticacaoEol.Item1.PerfisUsuario.Perfis.Select(x => x.CodigoPerfil).ToList();
-            servicoAbrangencia.RemoverAbrangenciasHistoricasIncorretas(login, perfis);
+            var perfis = retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto.PerfisUsuario.Perfis.Select(x => x.CodigoPerfil).ToList();
+            await servicoAbrangencia.RemoverAbrangenciasHistoricasIncorretas(login, perfis);
 
-            var perfilSelecionado = retornoAutenticacaoEol.Item1.PerfisUsuario.PerfilSelecionado;
+            var perfilSelecionado = retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto.PerfisUsuario.PerfilSelecionado;
 
             var dadosAcesso = await servicoEOL.CarregarDadosAcessoPorLoginPerfil(login, perfilSelecionado, administradorSuporte);
 
@@ -118,25 +120,25 @@ namespace SME.SGP.Aplicacao
 
             if (!permissionamentos.Any())
             {
-                retornoAutenticacaoEol.Item1.Autenticado = false;
-                return retornoAutenticacaoEol.Item1;
+                retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto.Autenticado = false;
+                return retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto;
             }
-
-            retornoAutenticacaoEol.Item1.Token = dadosAcesso.Token;
-            retornoAutenticacaoEol.Item1.DataHoraExpiracao = dadosAcesso.DataExpiracaoToken;
+            
+            retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto.Token = dadosAcesso.Token;
+            retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto.DataHoraExpiracao = dadosAcesso.DataExpiracaoToken;
 
             usuario.AtualizaUltimoLogin();
             await mediator.Send(new PublicarFilaSgpCommand(RotasRabbitSgp.AtualizaUltimoLoginUsuario, usuario));
 
             await mediator.Send(new CarregarAbrangenciaUsuarioCommand(login, perfilSelecionado));
 
-            retornoAutenticacaoEol.Item1.UsuarioLogin = usuario.Login;
-            retornoAutenticacaoEol.Item1.UsuarioRf = usuario.CodigoRf;
-            retornoAutenticacaoEol.Item1.AdministradorSuporte = administradorSuporte;
+            retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto.UsuarioLogin = usuario.Login;
+            retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto.UsuarioRf = usuario.CodigoRf;
+            retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto.AdministradorSuporte = administradorSuporte;
 
-            return retornoAutenticacaoEol.Item1;
+            return retornoAutenticacaoEol.UsuarioAutenticacaoRetornoDto;
         }
-
+        
         public async Task<TrocaPerfilDto> ModificarPerfil(Guid perfil)
         {
             var loginAtual = servicoUsuario.ObterLoginAtual();
