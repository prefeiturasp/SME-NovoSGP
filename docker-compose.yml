version: '3.1'

volumes:
  postgres-data: {}
  minio-data:

services:
  sme-db:
    container_name: sme-db
    restart: always
    image: postgres:11-alpine
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sgp_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sme-network
      
  sme-flyway:
    container_name: sme-flyway
    restart: on-failure:5
    image: boxfuse/flyway:5.2.4
    command: -url=jdbc:postgresql://sme-db:5432/sgp_db?user=postgres&password=postgres -locations='filesystem:/opt/scripts' -outOfOrder=true migrate
    volumes:
      - ./scripts:/opt/scripts
    depends_on:
      - 'sme-db'
    networks:
      - sme-network

  grafana:
    container_name: sme-grafana
    restart: always
    image: grafana/grafana
    ports:
      - '3000:3000'
    volumes:
      # Data persistency
      # sudo mkdir -p /srv/docker/influxdb/data
      - grafana-data:/var/lib/grafana
    networks:
      - sme-network
    depends_on:
      - 'prometheus'

  prometheus:
    container_name: sme-prometheus
    image: sme-prometheus
    build:
      context: .
      dockerfile: ./prometheus/Dockerfile
    ports:
      - 9090:9090
    networks:
      - sme-network
    depends_on:
      - 'sme-api'

  sme-redis:
    image: redis:5.0.5-alpine
    container_name: sme-redis
    ports:
      - '6379:6379'
    networks:
      - sme-network

  sme-minio-server:
    container_name: sme-minio-server
    image: 'bitnami/minio:latest'
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - sme-network
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=miniosecret
      - MINIO_DEFAULT_BUCKETS=bucket-temp-sgp:policy,bucket-sgp      
    volumes:
      - minio-data:/data

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.7-management-alpine
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=bitnami
    networks:
      - sme-network
    ports:
      - "5672:5672"
      - "15672:15672"

  elasticsearch:
    container_name: ElasticSearch
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0-amd64 
    environment: 
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - network.host=0.0.0.0
      - cluster.name="elastic_stack_logging"
      - node.name="elastic_stack_logging_data"
      - discovery.zen.minimum_master_nodes=1
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
    volumes: 
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5     
    networks:
      - sme-network

  kibana:
    container_name: Kibana
    hostname: kibana
    image: docker.elastic.co/kibana/kibana:7.13.0-amd64
    environment:
      - server.name=kibana
      - server.host="0"
      - elasticsearch.url=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://localhost:5601/ || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5     
    networks:
      - sme-network

  logstash:
    container_name: LogStash
    hostname: logstash
    build: 
      context: ./logstash
    command: logstash -f /config/logstash.conf  
    depends_on:
      - rabbitmq
      - elasticsearch
    networks:
      - sme-network      
networks:
  sme-network:
    driver: bridge
    external:
      name: sme-network
    name: sme_external_network
